// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace WebApiStarter.AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Projects API")]
    public partial class ProjectsAPIFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SpecFlowExample.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Projects API", "\tIn order to perform CRUD operations on the projects\r\n\tAs a client of the Web Api" +
                    "\r\n\tI want to be able to Create, Update, Delete, and List projects", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("01 Creating a new example")]
        [NUnit.Framework.CategoryAttribute("create")]
        [NUnit.Framework.TestCaseAttribute("T", "Spec01", "Spec02", new string[0])]
        public virtual void _01CreatingANewExample(string id, string prop1, string prop2, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "create"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("01 Creating a new example", @__tags);
#line 17
 this.ScenarioSetup(scenarioInfo);
#line 18
   testRunner.Given(string.Format("a new example \'{0}\', \'{1}\', \'{2}\'", id, prop1, prop2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 19
   testRunner.When("a POST request is made", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 20
   testRunner.Then("a \'201 Created\' status is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 21
   testRunner.Then("the example should be added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 22
   testRunner.Then("the response location header will be set to the resource location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("02 Retrieving an example")]
        [NUnit.Framework.CategoryAttribute("readOne")]
        [NUnit.Framework.TestCaseAttribute("T", "Spec01", "Spec02", new string[0])]
        public virtual void _02RetrievingAnExample(string id, string prop1, string prop2, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "readOne"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("02 Retrieving an example", @__tags);
#line 28
 this.ScenarioSetup(scenarioInfo);
#line 29
   testRunner.Given(string.Format("an existing example \'{0}\', \'{1}\', \'{2}\'", id, prop1, prop2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 30
   testRunner.When("it is retrieved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 31
   testRunner.Then("a \'200 Ok\' status is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 32
   testRunner.Then("it is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 33
   testRunner.Then("it should have an id", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 34
   testRunner.Then("it should have a prop1 and a prop2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("03 Updating an example")]
        [NUnit.Framework.CategoryAttribute("update")]
        [NUnit.Framework.TestCaseAttribute("T", "Spec11", "Spec12", new string[0])]
        public virtual void _03UpdatingAnExample(string id, string prop1, string prop2, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "update"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("03 Updating an example", @__tags);
#line 40
 this.ScenarioSetup(scenarioInfo);
#line 41
   testRunner.Given(string.Format("an example \'{0}\', \'{1}\', \'{2}\'", id, prop1, prop2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 42
   testRunner.When("a PUT request is made", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 43
   testRunner.Then("a \'200 Ok\' status is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 44
   testRunner.Then("the example should be updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("04 Deleting an example")]
        [NUnit.Framework.CategoryAttribute("delete")]
        [NUnit.Framework.TestCaseAttribute("T", new string[0])]
        public virtual void _04DeletingAnExample(string id, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "delete"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("04 Deleting an example", @__tags);
#line 50
 this.ScenarioSetup(scenarioInfo);
#line 51
   testRunner.Given(string.Format("an existing example\'s id \'{0}\'", id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 52
   testRunner.When("it is deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 53
   testRunner.Then("a \'200 Ok\' status is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 54
   testRunner.Then("the issue should be removed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
